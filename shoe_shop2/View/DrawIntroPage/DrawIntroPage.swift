//
//  DrawIntroPage.swift
//  ProjectName
//
//  Created by AuthorName on 5/8/21.
//  Copyright Â© 2021 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class DrawIntroPage : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 896), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 896), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 896)

        //Color
        let orange = #colorLiteral(red: 0.9411764741, green: 0.4980392158, blue: 0.3529411852, alpha: 1)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1000, y: 241.5))
        bezierPath.addLine(to: CGPoint(x: -200, y: 312.5))
        bezierPath.addLine(to: CGPoint(x: -200, y: 416.5))
        bezierPath.addLine(to: CGPoint(x: 1000, y: 346.5))
        bezierPath.addLine(to: CGPoint(x: 1000, y: 241.5))
        bezierPath.close()
        UIColor.init(named: ColorTheme.backgroundButton)?.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1000, y: 345.5))
        bezier2Path.addLine(to: CGPoint(x: -200, y: 416.5))
        bezier2Path.addLine(to: CGPoint(x: -200, y: 520.5))
        bezier2Path.addLine(to: CGPoint(x: 1000, y: 450.5))
        bezier2Path.addLine(to: CGPoint(x: 1000, y: 345.5))
        bezier2Path.close()
        orange.setFill()
        bezier2Path.fill()

        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 1000, y: 449.5))
        bezier3Path.addLine(to: CGPoint(x: -200, y: 520.5))
        bezier3Path.addLine(to: CGPoint(x: -200, y: 624.5))
        bezier3Path.addLine(to: CGPoint(x: 1000, y: 554.5))
        bezier3Path.addLine(to: CGPoint(x: 1000, y: 449.5))
        bezier3Path.close()
        UIColor.init(named: ColorTheme.shoeBackground4)?.setFill()
        bezier3Path.fill()

        
        //// Text Drawing
        let textRect = CGRect(x: 0, y: 91, width: 414, height: 60)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.systemFont(ofSize: 40, weight: .bold),
            .foregroundColor: UIColor(named: ColorTheme.backgroundButton) as Any,
            .paragraphStyle: textStyle,
        ] as [NSAttributedString.Key: Any]

        "Shose Shop\n\n".draw(in: textRect, withAttributes: textFontAttributes)


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 2, y: 170, width: 414, height: 60)
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 25, weight: .medium),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedString.Key: Any]

        "T H R O W B A C K     F U T U R E".draw(in: text2Rect, withAttributes: text2FontAttributes)

        
        context.restoreGState()

    }




    @objc(StyleKitNameResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
